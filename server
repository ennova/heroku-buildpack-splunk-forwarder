#!/usr/bin/env ruby

require 'socket'
require 'webrick'

class Server
  def initialize(drain_configs:)
    @drain_configs = drain_configs
  end

  def run
    splunk_socket = connect_to_splunk
    server = create_server(splunk_socket: splunk_socket)

    puts 'Running server'
    server.start
  end

  def connect_to_splunk
    puts 'Connecting to Splunk'

    5.times do
      begin
        puts 'Attempting to connect to Splunk'
        return TCPSocket.new('127.0.0.1', 48000)
      rescue Errno::ECONNREFUSED => e
        puts "Failed to connect to Splunk: #{e.inspect}"
        puts 'Sleeping and retrying.'
        sleep 1
      end
    end

    raise 'Could not connect to Splunk'
  end

  def create_server(splunk_socket:)
    puts 'Creating server'

    server = WEBrick::HTTPServer.new(
      Port: ENV.fetch('PORT'),
      # Don't need WEBrick to log anything, the heroku router will.
      Logger: WEBrick::Log.new('/dev/null'),
      AccessLog: [],
    )

    shutdown = proc do
      puts 'Disconnecting from Splunk'
      splunk_socket.close
      puts 'Shutting down web server'
      server.shutdown
      puts 'Stopping Splunk'
      system('$HOME/splunk/bin/splunk stop')
    end

    trap 'INT', shutdown
    trap 'TERM', shutdown

    server.mount_proc '/' do |request, response|
      splunk_socket.puts(request.body)
      splunk_socket.flush
    end

    server
  end
end
