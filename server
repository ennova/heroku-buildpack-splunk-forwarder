#!/usr/bin/env ruby

require 'socket'
require 'webrick'

class Server
  def initialize(default_splunk_port:, drain_configs:)
    @default_splunk_port = default_splunk_port
    @drain_configs = drain_configs
  end

  def run
    create_splunk_sockets
    create_server
    run_server
  end

  private

  def run_server
    puts 'Running server'

    @server.start
  end

  def create_splunk_sockets
    @splunk_sockets = {}

    @splunk_sockets[:default] = create_splunk_socket(@default_splunk_port)

    @drain_configs.each do |drain_id, config|
      @splunk_sockets[drain_id] = create_splunk_socket(config['port'])
    end

    @splunk_sockets
  end

  def create_splunk_socket(port)
    puts 'Connecting to Splunk'

    5.times do
      begin
        puts "Attempting to connect to Splunk on port #{port}"
        return TCPSocket.new('127.0.0.1', port)
      rescue Errno::ECONNREFUSED => e
        puts "Failed to connect to Splunk: #{e.inspect}"
        puts 'Sleeping and retrying.'
        sleep 1
      end
    end

    raise 'Could not connect to Splunk'
  end

  def create_server
    puts 'Creating server'

    @server = WEBrick::HTTPServer.new(
      Port: ENV.fetch('PORT'),
      # Don't need WEBrick to log anything, the heroku router will.
      Logger: WEBrick::Log.new('/dev/null'),
      AccessLog: [],
    )

    shutdown = proc do
      puts 'Disconnecting from Splunk'
      @splunk_sockets.each { |_, socket| socket.close }
      puts 'Shutting down web server'
      @server.shutdown
      puts 'Stopping Splunk'
      system('$HOME/splunk/bin/splunk stop')
    end

    trap 'INT', shutdown
    trap 'TERM', shutdown

    @server.mount_proc '/' do |request, response|
      drain_id = request['Logplex-Drain-Token']
      socket = @splunk_sockets[drain_id] || @splunk_sockets[:default]

      socket.puts(request.body)
      socket.flush
    end
  end
end
