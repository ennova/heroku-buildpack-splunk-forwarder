#!/usr/bin/env ruby

puts "RUBY_VERSION: #{RUBY_VERSION}"

require 'fileutils'

def sys(command)
  puts "Executing command: #{command}"
  system(command) || raise('Command failed')
end

# Require a password so avoid "admin/changeme" as the default
if !ENV.key?('SPLUNK_ADMIN_PASSWORD')
  raise 'SPLUNK_ADMIN_PASSWORD environment variable is not set. Please set it.'
end

app_local_path="#{ENV['HOME']}/local"

Dir.mkdir(app_local_path) if !Dir.exist?(app_local_path)

splunk_cloud_app_path='splunkclouduf.spl'

if !File.exist?(splunk_cloud_app_path)
  raise "Splunk Cloud app missing. Please add it at #{splunk_cloud_app_path}"
end

# Change the password from the default one
# Also, this takes care of running Splunk's "first time run" (frt) code and
# accepting the license.
puts 'Changing admin password'
sys('splunk/bin/splunk edit user admin -password "$SPLUNK_ADMIN_PASSWORD" -role admin -auth admin:changeme --accept-license')

# - Move the Splunk-generated etc/system/local files aside
# - Move the app's local files into place
# - Append the Splunk-generated files into the app's files

puts('Merging splunk-generated config files with app config files')

system_local_path='splunk/etc/system/local'
old_system_local_path='splunk/etc/system/local-old'

FileUtils.mv(system_local_path, old_system_local_path)

FileUtils.ln_s(app_local_path, system_local_path)

Dir.glob("#{old_system_local_path}/*.conf") do |old_conf_path|
  filename = File.basename(old_conf_path)
  new_conf_path = "#{system_local_path}/#{filename}"

  File.open(new_conf_path, 'a') do |file|
    file.puts
    file.puts File.read(old_conf_path)
  end
end

inputs_conf_path = "#{system_local_path}/inputs.conf"

puts 'Creating default inputs.conf for port 48000'
File.open(inputs_conf_path, 'a') do |file|
  file.puts
  file.puts <<-EOS.gsub(/^ +/, '')
    [tcp://48000]
    connection_host = ip
    source = heroku
    sourcetype = heroku-syslog
  EOS
end

# Loop through each drain id in the environment and add stanzas for them.
# Every environment variable with a key like "d.XXX" is considered a drain id
# and should be formatted like this:
#   index=main source=website sourcetype=rails
# (all values are optional)
puts 'Generating inputs.conf entries for environment drain ids'
ENV.select { |k, v| k =~ /^d\./ }.each.with_index do |(drain_id, drain_data), i|
  configs = drain_data.split.map { |keyval| keyval.split('=') }.to_h

  port = 48001 + i
  index = configs['index']
  source = configs['source'] || 'heroku'
  sourcetype = configs['sourcetype'] || 'heroku-syslog'

  File.open(inputs_conf_path, 'a') do |file|
    file.puts
    file.puts <<-EOS.gsub(/^ +/, '')
      [tcp://#{port}]
      connection_host = ip
      source = #{source}"
      sourcetype = #{sourcetype}
    EOS
    file.puts "index = #{index}" if index
  end
end

puts 'inputs.conf contents:'
puts File.read(inputs_conf_path)
puts

puts 'Disabling webserver functionality'
sys('splunk/bin/splunk disable webserver')

puts 'Starting splunkd'
sys('splunk/bin/splunk start splunkd')

puts 'Installing Splunk Cloud app'
sys("splunk/bin/splunk install app #{splunk_cloud_app_path} -auth admin:\"$SPLUNK_ADMIN_PASSWORD\"")

puts 'Restarting Splunk'
sys('splunk/bin/splunk restart splunkd')

puts 'Starting web server'
sys('./server')
