#!/usr/bin/env bash

set -e

# Require a password so avoid "admin/changeme" as the default
if [ -z "$SPLUNK_ADMIN_PASSWORD" ]; then
  echo 'SPLUNK_ADMIN_PASSWORD environment variable is not set. Please set it.'
  exit 1
fi

app_local_path="$HOME/local"

mkdir -p app_local_path

splunk_cloud_app_path='splunkclouduf.spl'

if [ ! -f "$splunk_cloud_app_path" ]; then
  echo "Splunk Cloud app missing. Please add it at $splunk_cloud_app_path"
  exit 1
fi

# Change the password from the default one
# Also, this takes care of running Splunk's "first time run" (frt) code and
# accepting the license.
splunk/bin/splunk edit user admin -password "$SPLUNK_ADMIN_PASSWORD" -role admin -auth admin:changeme --accept-license

# - Move the Splunk-generated etc/system/local files aside
# - Move the app's local files into place
# - Append the Splunk-generated files into the app's files

system_local_path=splunk/etc/system/local
old_system_local_path=splunk/etc/system/local-old

mv $system_local_path $old_system_local_path

ln -s $app_local_path $system_local_path

for conf_path in $old_system_local_path/*
do
  # add a newline to the target file just in case it doesn't have one at the end
  echo >> $system_local_path/${conf_path##*/}
  cat $conf_path >> $system_local_path/${conf_path##*/}
done

cat << EOF >> $system_local_path/inputs.conf

[tcp://48000]
connection_host = ip
index = staging
source = website
sourcetype = node
EOF

# Loop through each drain id in the environment and add stanzas for them.
# This assumes that only all environment variables like "d.XXX" are drain ids.
# for drain_id in `echo ${!d.*}`
# do
#   drain_source=`printenv $drain_id`
# done

echo 'Disabling webserver functionality'
splunk/bin/splunk disable webserver

echo 'Starting splunkd'
splunk/bin/splunk start splunkd

echo 'Installing Splunk Cloud app'
splunk/bin/splunk install app $splunk_cloud_app_path -auth admin:"$SPLUNK_ADMIN_PASSWORD"

echo 'Restarting Splunk'
splunk/bin/splunk restart splunkd

echo 'Starting web server'
./server
